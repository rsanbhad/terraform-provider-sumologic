// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
  "log"
  "github.com/hashicorp/terraform-plugin-sdk/helper/schema"
  
)

func resourceSumologicScheduledView() *schema.Resource {
    return &schema.Resource{
      Create: resourceSumologicScheduledViewCreate,
      Read: resourceSumologicScheduledViewRead,
      Update: resourceSumologicScheduledViewUpdate,
      Delete: resourceSumologicScheduledViewDelete,
      Importer: &schema.ResourceImporter{
        State: schema.ImportStatePassthrough,
      },

       Schema: map[string]*schema.Schema{
        "index_name": {
           Type: schema.TypeString,
          Required: true,
           ForceNew: false,
           
           
         },
         "start_time": {
           Type: schema.TypeString,
          Required: true,
           ForceNew: false,
           
           
         },
         "retention_period": {
           Type: schema.TypeInt,
          Optional: true,
           ForceNew: false,
Default: -1,
           
           
         },
         "parsing_mode": {
           Type: schema.TypeString,
          Optional: true,
           ForceNew: false,
Default: "Manual",
           
           
         },
         "query": {
           Type: schema.TypeString,
          Required: true,
           ForceNew: false,
           
           
         },
        
    },
  }
}

func resourceSumologicScheduledViewRead(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

  

	id := d.Id()
	scheduledView, err := c.GetScheduledView(id)

	if err != nil {
		return err
	}

	if scheduledView == nil {
		log.Printf("[WARN] ScheduledView not found, removing from state: %v - %v", id, err)
		d.SetId("")
		return nil
	}

	d.Set("parsing_mode", scheduledView.ParsingMode)
    d.Set("query", scheduledView.Query)
    d.Set("retention_period", scheduledView.RetentionPeriod)
    d.Set("index_name", scheduledView.IndexName)
    d.Set("start_time", scheduledView.StartTime)

	return nil
}

func resourceSumologicScheduledViewUpdate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

  

	scheduledView := resourceToScheduledView(d)

	err := c.UpdateScheduledView(scheduledView)

	if err != nil {
		return err
	}

	return resourceSumologicScheduledViewRead(d, meta)
}

func resourceSumologicScheduledViewCreate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

  

	if d.Id() == "" {
		scheduledView := resourceToScheduledView(d)
		id, err := c.CreateScheduledView(scheduledView)

		if err != nil {
			return err
		}

		d.SetId(id)
	}

	return resourceSumologicScheduledViewRead(d, meta)
}
func resourceSumologicScheduledViewDelete(d *schema.ResourceData, meta interface{}) error {
  c := meta.(*Client)

  

  return c.DeleteScheduledView(d.Id())
}
func resourceToScheduledView(d *schema.ResourceData) ScheduledView {
   
   
   return ScheduledView{
    IndexName: d.Get("index_name").(string),
    ParsingMode: d.Get("parsing_mode").(string),
    ID: d.Id(),
    RetentionPeriod: d.Get("retention_period").(int),
    StartTime: d.Get("start_time").(string),
    Query: d.Get("query").(string),
   }
 }