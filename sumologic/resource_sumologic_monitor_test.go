// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------\
package sumologic

import (
	"fmt"
	"strconv"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

func TestAccSumologicMonitor_basic(t *testing.T) {
	var monitor Monitor
	testName := FieldsMap["Monitor"]["name"]
	testScope := FieldsMap["Monitor"]["scope"]
	testParseExpression := FieldsMap["Monitor"]["parseExpression"]
	testEnabled, _ := strconv.ParseBool(FieldsMap["Monitor"]["enabled"])

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckMonitorDestroy(monitor),
		Steps: []resource.TestStep{
			{
				Config: testAccCheckSumologicMonitorConfigImported(testName, testScope, testParseExpression, testEnabled),
			},
			{
				ResourceName:      "sumologic_field_extraction_rule.foo",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccMonitor_create(t *testing.T) {
	var monitor Monitor
	testName := FieldsMap["Monitor"]["name"]
	testScope := FieldsMap["Monitor"]["scope"]
	testParseExpression := FieldsMap["Monitor"]["parseExpression"]
	testEnabled, _ := strconv.ParseBool(FieldsMap["Monitor"]["enabled"])
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckMonitorDestroy(monitor),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologicMonitor(testName, testScope, testParseExpression, testEnabled),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckMonitorExists("sumologic_field_extraction_rule.test", &monitor, t),
					testAccCheckMonitorAttributes("sumologic_field_extraction_rule.test"),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "name", testName),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "scope", testScope),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "parse_expression", testParseExpression),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "enabled", strconv.FormatBool(testEnabled)),
				),
			},
		},
	})
}

func testAccCheckMonitorDestroy(monitor Monitor) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		client := testAccProvider.Meta().(*Client)
		for _, r := range s.RootModule().Resources {
			id := r.Primary.ID
			u, err := client.GetMonitor(id)
			if err != nil {
				return fmt.Errorf("Encountered an error: " + err.Error())
			}
			if u != nil {
				return fmt.Errorf("Monitor still exists")
			}
		}
		return nil
	}
}

func testAccCheckMonitorExists(name string, monitor *Monitor, t *testing.T) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]
		if !ok {
			//need this so that we don't get an unused import error for strconv in some cases
			return fmt.Errorf("Error = %s. Monitor not found: %s", strconv.FormatBool(ok), name)
		}

		//need this so that we don't get an unused import error for strings in some cases
		if strings.EqualFold(rs.Primary.ID, "") {
			return fmt.Errorf("Monitor ID is not set")
		}

		id := rs.Primary.ID
		c := testAccProvider.Meta().(*Client)
		newMonitor, err := c.GetMonitor(id)
		if err != nil {
			return fmt.Errorf("Monitor %s not found", id)
		}
		monitor = newMonitor
		return nil
	}
}

func TestAccMonitor_update(t *testing.T) {
	var monitor Monitor
	testName := FieldsMap["Monitor"]["name"]
	testScope := FieldsMap["Monitor"]["scope"]
	testParseExpression := FieldsMap["Monitor"]["parseExpression"]
	testEnabled, _ := strconv.ParseBool(FieldsMap["Monitor"]["enabled"])

	testUpdatedName := FieldsMap["Monitor"]["updatedName"]
	testUpdatedScope := FieldsMap["Monitor"]["updatedScope"]
	testUpdatedParseExpression := FieldsMap["Monitor"]["updatedParseExpression"]
	testUpdatedEnabled, _ := strconv.ParseBool(FieldsMap["Monitor"]["updatedEnabled"])

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckMonitorDestroy(monitor),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologicMonitor(testName, testScope, testParseExpression, testEnabled),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckMonitorExists("sumologic_field_extraction_rule.test", &monitor, t),
					testAccCheckMonitorAttributes("sumologic_field_extraction_rule.test"),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "name", testName),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "scope", testScope),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "parse_expression", testParseExpression),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "enabled", strconv.FormatBool(testEnabled)),
				),
			},
			{
				Config: testAccSumologicMonitorUpdate(testUpdatedName, testUpdatedScope, testUpdatedParseExpression, testUpdatedEnabled),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckMonitorExists("sumologic_field_extraction_rule.test", &monitor, t),
					testAccCheckMonitorAttributes("sumologic_field_extraction_rule.test"),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "name", testUpdatedName),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "scope", testUpdatedScope),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "parse_expression", testUpdatedParseExpression),
					resource.TestCheckResourceAttr("sumologic_field_extraction_rule.test", "enabled", strconv.FormatBool(testUpdatedEnabled)),
				),
			},
		},
	})
}

func testAccCheckSumologicMonitorConfigImported(name string, scope string, parseExpression string, enabled bool) string {
	return fmt.Sprintf(`
resource "sumologic_field_extraction_rule" "foo" {
      name = "%s"
      scope = "%s"
      parse_expression = "%s"
      enabled = %t
}
`, name, scope, parseExpression, enabled)
}

func testAccSumologicMonitor(name string, scope string, parseExpression string, enabled bool) string {
	return fmt.Sprintf(`
resource "sumologic_field_extraction_rule" "test" {
    name = "%s"
    scope = "%s"
    parse_expression = "%s"
    enabled = %t
}
`, name, scope, parseExpression, enabled)
}

func testAccSumologicMonitorUpdate(name string, scope string, parseExpression string, enabled bool) string {
	return fmt.Sprintf(`
resource "sumologic_field_extraction_rule" "test" {
      name = "%s"
      scope = "%s"
      parse_expression = "%s"
      enabled = %t
}
`, name, scope, parseExpression, enabled)
}

func testAccCheckMonitorAttributes(name string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		f := resource.ComposeTestCheckFunc(
			resource.TestCheckResourceAttrSet(name, "name"),
			resource.TestCheckResourceAttrSet(name, "scope"),
			resource.TestCheckResourceAttrSet(name, "parse_expression"),
			resource.TestCheckResourceAttrSet(name, "enabled"),
		)
		return f(s)
	}
}
