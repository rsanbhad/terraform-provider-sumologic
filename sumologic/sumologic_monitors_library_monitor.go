// ---------- BEGIN MonitorsLibraryMonitor ----------
// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"encoding/json"
	"fmt"
)

// ---------- ENDPOINTS ----------

func (s *Client) CreateMonitorsLibraryMonitor(monitorsLibraryMonitor MonitorsLibraryMonitor, paramMap map[string]string) (string, error) {
	urlWithoutParams := "v1/monitors"
	paramString := ""
	sprintfArgs := []interface{}{}

	paramString += "?"

	if val, ok := paramMap["parentId"]; ok {
		queryParam := fmt.Sprintf("parentId=%s&", val)
		paramString += queryParam
	}

	data, err := s.Post(urlWithoutParams, monitorsLibraryMonitorResponse)
	if err != nil {
		return "", err
	}

	var createdMonitorsLibraryMonitorResponse MonitorsLibraryMonitorResponse

	err = json.Unmarshal(data, &createdMonitorsLibraryMonitorResponse)
	if err != nil {
		return "", err
	}

	return createdMonitorsLibraryMonitorResponse.ID, nil
}

func (s *Client) MonitorsReadById(id string) (*MonitorsLibraryMonitorResponse, error) {
	urlWithoutParams := "v1/monitors/%s"
	paramString := ""
	sprintfArgs := []interface{}{}
	sprintfArgs = append(sprintfArgs, id)

	urlWithParams := fmt.Sprintf(urlWithoutParams+paramString, sprintfArgs...)

	data, _, err := s.Get(urlWithParams)
	if err != nil {
		return nil, err
	}
	if data == nil {
		return nil, nil
	}

	var monitorsLibraryMonitorResponse MonitorsLibraryMonitorResponse

	err = json.Unmarshal(data, &monitorsLibraryMonitorResponse)

	if err != nil {
		return nil, err
	}

	return &monitorsLibraryMonitorResponse, nil
}

func (s *Client) DeleteMonitorsLibraryMonitor(id string) error {
	urlWithoutParams := "v1/monitors/%s"
	paramString := ""
	sprintfArgs := []interface{}{}
	sprintfArgs = append(sprintfArgs, id)

	urlWithParams := fmt.Sprintf(urlWithoutParams+paramString, sprintfArgs...)

	_, err := s.Delete(urlWithParams)

	return err
}

func (s *Client) UpdateMonitorsLibraryMonitor(monitorsLibraryMonitor MonitorsLibraryMonitor) error {
	urlWithoutParams := "v1/monitors/%s"
	paramString := ""
	sprintfArgs := []interface{}{}
	sprintfArgs = append(sprintfArgs, monitorsLibraryMonitorResponse.ID)

	urlWithParams := fmt.Sprintf(urlWithoutParams+paramString, sprintfArgs...)

	monitorsLibraryMonitorResponse.ID = ""

	_, err := s.Put(urlWithParams, monitorsLibraryMonitorResponse)
	return err
}

// ---------- TYPES ----------
type MonitorsLibraryMonitor struct {
	ID            string   `json:"id,omitempty"`
	Type          string   `json:"type"`
	Queries       []string `json:"queries,omitempty"`
	Name          string   `json:"name"`
	Notifications []string `json:"notifications,omitempty"`
	MonitorType   string   `json:"monitorType"`
	Description   string   `json:"description"`
	Triggers      []string `json:"triggers,omitempty"`
}

// Monitor model
// type Monitor struct {
// 	ID            string `json:"id,omitempty"`
// 	Name          string `json:"name"`
// 	Type          string `json:"type"`
// 	Description   string `json:"description,omitempty"`
// 	Version       string `json:"version,omitempty"`
// 	CreatedAt     string `json: "createdAt"`
// 	CreatedBy     string `json: "createdBy"`
// 	ModifiedAt    string `json: "modifiedAt"`
// 	ModifiedBy    string `json: "modifiedBy"`
// 	ParentID      string `json: "parentId"`
// 	ContentType   string `json: "contentType"`
// 	IsLocked      string `json: "isLocked"`
// 	IsSystem      string `json: "isSystem"`
// 	IsMutable     string `json: "isMutable"`
// 	MonitorType   string `json: "monitorType"`
// 	Notifications string `json: "notifications"`
// 	Queries       string `json: "queries"`
// 	Triggers      string `json: "triggers"`
// }

// MonitorQuery model
// type MonitorQuery struct {
// 	RowID        string `json:"id"`
// 	Query        string `json:"query"`
// 	IsTriggerRow string `json:"isTriggerRow"`
// }

// MonitorNotification model
// type MonitorNotification struct {
// 	Query string `json:"query"`
// }

// MonitorTriggerCondition model

// ---------- END ----------
