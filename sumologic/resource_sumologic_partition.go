// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"log"
)

func resourceSumologicPartition() *schema.Resource {
	return &schema.Resource{
		Create: resourceSumologicPartitionCreate,
		Read:   resourceSumologicPartitionRead,
		Update: resourceSumologicPartitionUpdate,
		Delete: resourceSumologicPartitionDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"is_compliant": {
				Type:     schema.TypeBool,
				Optional: true,
				ForceNew: false,
				Default:  false,
			},
			"routing_expression": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: false,
			},
			"retention_period": {
				Type:     schema.TypeInt,
				Optional: true,
				ForceNew: false,
				Default:  -1,
			},
			"name": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: false,
			},
			"analytics_tier": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: false,
				Default:  "enhanced",
			},
		},
	}
}

func resourceSumologicPartitionCreate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	if d.Id() == "" {
		partition := resourceToPartition(d)
		id, err := c.CreatePartition(partition)

		if err != nil {
			return err
		}

		d.SetId(id)
	}

	return resourceSumologicPartitionRead(d, meta)
}

func resourceSumologicPartitionRead(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	id := d.Id()
	partition, err := c.GetPartition(id)

	if err != nil {
		return err
	}

	if partition == nil {
		log.Printf("[WARN] Partition not found, removing from state: %v - %v", id, err)
		d.SetId("")
		return nil
	}

	d.Set("routing_expression", partition.RoutingExpression)
	d.Set("is_compliant", partition.IsCompliant)
	d.Set("analytics_tier", partition.AnalyticsTier)
	d.Set("name", partition.Name)
	d.Set("retention_period", partition.RetentionPeriod)

	return nil
}

func resourceSumologicPartitionUpdate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	partition := resourceToPartition(d)

	err := c.UpdatePartition(partition)

	if err != nil {
		return err
	}

	return resourceSumologicPartitionRead(d, meta)
}
func resourceToPartition(d *schema.ResourceData) Partition {

	return Partition{
		Name:              d.Get("name").(string),
		ID:                d.Id(),
		RetentionPeriod:   d.Get("retention_period").(int),
		IsCompliant:       d.Get("is_compliant").(bool),
		AnalyticsTier:     d.Get("analytics_tier").(string),
		RoutingExpression: d.Get("routing_expression").(string),
	}
}
