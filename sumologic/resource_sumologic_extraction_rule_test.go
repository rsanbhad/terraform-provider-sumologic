// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"fmt"
	"testing"
  "strconv"
  "strings"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)
func TestAccSumologicExtractionRule_basic(t *testing.T) {
	var extractionRule ExtractionRule
	

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckExtractionRuleDestroy(extractionRule),
		Steps: []resource.TestStep{
			{
				Config: testAccCheckSumologicExtractionRuleConfigImported(),
			},
			{
				ResourceName:      "sumologic_extraction_rule.foo",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}
func TestAccExtractionRule_create(t *testing.T) {
  var extractionRule ExtractionRule
  
  resource.Test(t, resource.TestCase{
    PreCheck: func() { testAccPreCheck(t) },
    Providers:    testAccProviders,
    CheckDestroy: testAccCheckExtractionRuleDestroy(extractionRule),
    Steps: []resource.TestStep{
      {
        Config: testAccSumologicExtractionRule(),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckExtractionRuleExists("sumologic_extraction_rule.test", &extractionRule, t),
          testAccCheckExtractionRuleAttributes("sumologic_extraction_rule.test"),
          
        ),
      },
    },
  })
}

func testAccCheckExtractionRuleDestroy(extractionRule ExtractionRule) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		client := testAccProvider.Meta().(*Client)
    for _, r := range s.RootModule().Resources {
      id := r.Primary.ID
		  u, err := client.GetExtractionRule(id)
		  if err != nil {
        return fmt.Errorf("Encountered an error: " + err.Error())
		  }
      if u != nil {
        return fmt.Errorf("ExtractionRule still exists")
      }
    }
		return nil
	}
}
func testAccCheckExtractionRuleExists(name string, extractionRule *ExtractionRule, t *testing.T) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]
		if !ok {
      //need this so that we don't get an unused import error for strconv in some cases
			return fmt.Errorf("Error = %s. ExtractionRule not found: %s", strconv.FormatBool(ok), name)
		}

    //need this so that we don't get an unused import error for strings in some cases
		if strings.EqualFold(rs.Primary.ID, "") {
			return fmt.Errorf("ExtractionRule ID is not set")
		}

		id := rs.Primary.ID
		c := testAccProvider.Meta().(*Client)
		newExtractionRule, err := c.GetExtractionRule(id)
		if err != nil {
			return fmt.Errorf("ExtractionRule %s not found", id)
		}
		extractionRule = newExtractionRule
		return nil
	}
}

func TestAccExtractionRule_update(t *testing.T) {
  var extractionRule ExtractionRule
  

  

	resource.Test(t, resource.TestCase{
		PreCheck: func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckExtractionRuleDestroy(extractionRule),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologicExtractionRule(),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckExtractionRuleExists("sumologic_extraction_rule.test", &extractionRule, t),
					testAccCheckExtractionRuleAttributes("sumologic_extraction_rule.test"),
          
				),
			},
			{
				Config: testAccSumologicExtractionRuleUpdate(),
				Check: resource.ComposeTestCheckFunc(
					
				),
			},
		},
	})
}
func testAccCheckSumologicExtractionRuleConfigImported() string {
	return fmt.Sprintf(`
resource "sumologic_extraction_rule" "foo" {
      
}
`, )
}

func testAccSumologicExtractionRule() string {
	return fmt.Sprintf(`
resource "sumologic_extraction_rule" "test" {
    
}
`, )
}

func testAccSumologicExtractionRuleUpdate() string {
	return fmt.Sprintf(`
resource "sumologic_extraction_rule" "test" {
      
}
`, )
}

func testAccCheckExtractionRuleAttributes(name string) resource.TestCheckFunc {
  return func(s *terraform.State) error {
      f := resource.ComposeTestCheckFunc(
        
      )
      return f(s)
   }
}