// ---------- BEGIN ExtractionRule ----------
// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
  "encoding/json"
  "fmt"
)

// ---------- ENDPOINTS ---------- 


func (s *Client) CreateExtractionRule(extractionRule ExtractionRule) (string, error) {
    urlWithoutParams := "v1/extractionRules"
    
    
    
    
  data, err := s.Post(urlWithoutParams, extractionRule)
  if err != nil {
		return "", err
	}

    var createdExtractionRule ExtractionRule

    
    err = json.Unmarshal(data, &createdExtractionRule)
    if err != nil {
        return "", err
    }

    return createdExtractionRule.ID, nil
}


func (s *Client) GetExtractionRule(id string) (*ExtractionRule, error) {
    urlWithoutParams := "v1/extractionRules/%s"
    paramString := ""
sprintfArgs := []interface{}{}
sprintfArgs = append(sprintfArgs, id)





    urlWithParams := fmt.Sprintf(urlWithoutParams + paramString, sprintfArgs...)
    
    
  data, _, err := s.Get(urlWithParams)
  if err != nil {
		return nil, err
	}
	if data == nil {
		return nil, nil
	}

    var extractionRule ExtractionRule

    
    err = json.Unmarshal(data, &extractionRule)

    if err != nil {
        return nil, err
    }

    return &extractionRule, nil
}


func (s *Client) DeleteExtractionRule(id string) error {
    urlWithoutParams := "v1/extractionRules/%s"
    paramString := ""
sprintfArgs := []interface{}{}
sprintfArgs = append(sprintfArgs, id)





    urlWithParams := fmt.Sprintf(urlWithoutParams + paramString, sprintfArgs...)
    
    _, err := s.Delete(urlWithParams)
    
    return err
}


func (s *Client) UpdateExtractionRule(extractionRule ExtractionRule) error {
    urlWithoutParams := "v1/extractionRules/%s"
    paramString := ""
sprintfArgs := []interface{}{}
sprintfArgs = append(sprintfArgs, extractionRule.ID)





    urlWithParams := fmt.Sprintf(urlWithoutParams + paramString, sprintfArgs...)
    
    
    
    
    extractionRule.ID = ""
    

    _, err := s.Put(urlWithParams, extractionRule)
    return err
}


// ---------- TYPES ----------
type ExtractionRule struct {
    ID string `json:"id,omitempty"`
}


// ---------- END ----------
