// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
  "log"
  "github.com/hashicorp/terraform-plugin-sdk/helper/schema"
  
)

func resourceSumologicExtractionRule() *schema.Resource {
    return &schema.Resource{
      Create: resourceSumologicExtractionRuleCreate,
      Read: resourceSumologicExtractionRuleRead,
      Update: resourceSumologicExtractionRuleUpdate,
      Delete: resourceSumologicExtractionRuleDelete,
      Importer: &schema.ResourceImporter{
        State: schema.ImportStatePassthrough,
      },

       Schema: map[string]*schema.Schema{
        ,
        
    },
  }
}

func resourceSumologicExtractionRuleCreate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

  

	if d.Id() == "" {
		extractionRule := resourceToExtractionRule(d)
		id, err := c.CreateExtractionRule(extractionRule)

		if err != nil {
			return err
		}

		d.SetId(id)
	}

	return resourceSumologicExtractionRuleRead(d, meta)
}

func resourceSumologicExtractionRuleRead(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

  

	id := d.Id()
	extractionRule, err := c.GetExtractionRule(id)

	if err != nil {
		return err
	}

	if extractionRule == nil {
		log.Printf("[WARN] ExtractionRule not found, removing from state: %v - %v", id, err)
		d.SetId("")
		return nil
	}

	

	return nil
}
func resourceSumologicExtractionRuleDelete(d *schema.ResourceData, meta interface{}) error {
  c := meta.(*Client)

  

  return c.DeleteExtractionRule(d.Id())
}

func resourceSumologicExtractionRuleUpdate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

  

	extractionRule := resourceToExtractionRule(d)

	err := c.UpdateExtractionRule(extractionRule)

	if err != nil {
		return err
	}

	return resourceSumologicExtractionRuleRead(d, meta)
}
func resourceToExtractionRule(d *schema.ResourceData) ExtractionRule {
   
   
   return ExtractionRule{
    ID: d.Id(),
   }
 }